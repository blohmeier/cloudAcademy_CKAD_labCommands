QUESTIONS ONLY

VALIDATION STEPS
Certified Kubernetes Application Developer (CKAD) Challenge
CKAD Check 1: Service Account
Create a service account named inspector in the dwx7eq namespace. Then create a deployment named calins in the same namespace. Use the image busybox:1.31.1 for the only pod container and pass the arguments sleep and 24h to the container. Set the number of replicas to 1. Lastly, make sure that the deployments' pod is using the inspector service account.

Kubernetes
CKAD Check 2: Evictions
The mission-critical deployment in the bk0c2d namespace has been getting evicted when the Kubernetes cluster is consuming a lot of memory. Modify the deployment so that it will not be evicted when the cluster is under memory pressure unless there are higher priority pods running in the cluster (Guaranteed Quality of Service). It is known that the container for the deployment's pod requires and will not use more than 200 milliCPU (200m) and 200 mebibytes (200Mi) of memory.

Kubernetes
CKAD Check 3: Persisting Data
A legacy application runs via a deployment in the zuc0co namespace. The deployment's pod uses a multi-container pod to convert the legacy application's raw metric output into a format that can be consumed by a metric aggregation system. However, the data is currently lost every time the pod is deleted. Modify the deployment to use a persistent volume claim with 2GiB of storage and access mode of ReadWriteOnce so the data is persisted if the pod is deleted.

Kubernetes
CKAD Check 4: Multi-Container Pattern
Write the name of the multi-container pod design pattern used by the pod in the previous task to a file at /home/ubuntu/mcpod.

QUESTIONS AND ANSWERS
<--------------------------------------------------------------------------------------------------------->
CKAD Check 1: Service Account
Create a service account named inspector in the dwx7eq namespace. Then create a deployment named calins in the same namespace. Use the image busybox:1.31.1 for the only pod container and pass the arguments sleep and 24h to the container. Set the number of replicas to 1. Lastly, make sure that the deployments' pod is using the inspector service account.

kubectl create -n dwx7eq serviceaccount inspector
cat <<'EOF' | kubectl create -f -
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: calins
  name: calins
  namespace: dwx7eq
spec:
  replicas: 1
  selector:
    matchLabels:
      app: calins
  template:
    metadata:
      labels:
        app: calins
    spec:
      serviceAccount: inspector
      containers:
      - image: busybox:1.31.1
        args: ["sleep", "24h"]
        name: inspector
EOF




<--------------------------------------------------------------------------------------------------------->
CKAD Check 2: Evictions
The mission-critical deployment in the bk0c2d namespace has been getting evicted when the Kubernetes cluster is consuming a lot of memory. Modify the deployment so that it will not be evicted when the cluster is under memory pressure unless there are higher priority pods running in the cluster (Guaranteed Quality of Service). It is known that the container for the deployment's pod requires and will not use more than 200 milliCPU (200m) and 200 mebibytes (200Mi) of memory.



<--------------------------------------------------------------------------------------------------------->


<--------------------------------------------------------------------------------------------------------->


<--------------------------------------------------------------------------------------------------------->

ANSWERS ONLY

# task 1
kubectl create -n dwx7eq serviceaccount inspector
cat <<'EOF' | kubectl create -f -
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: calins
  name: calins
  namespace: dwx7eq
spec:
  replicas: 1
  selector:
    matchLabels:
      app: calins
  template:
    metadata:
      labels:
        app: calins
    spec:
      serviceAccount: inspector
      containers:
      - image: busybox:1.31.1
        args: ["sleep", "24h"]
        name: inspector
EOF
# task 2
cat <<'EOF' | kubectl --kubeconfig=/home/ubuntu/.kube/config apply -f -
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: mission-critical
  name: mission-critical
  namespace: bk0c2d
spec:
  replicas: 2
  selector:
    matchLabels:
      app: mission-critical
  template:
    metadata:
      labels:
        app: mission-critical
    spec:
      containers:
      - image: redis:5.0.7
        name: mission-critical
        env:
        - name: MASTER
          value: "true"
        ports:
        - containerPort: 6379
        resources:
          limits:
            cpu: "200m"
            memory: "200Mi"
          requests:
            cpu: "200m"
            memory: "200Mi"
        volumeMounts:
        - mountPath: /redis-master-data
          name: data
      restartPolicy: Always
      volumes:
        - name: data
          emptyDir: {}
EOF
# task 3
cat <<'EOF' | kubectl --kubeconfig=/home/ubuntu/.kube/config apply -f -
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: metric-data
  namespace: zuc0co
spec:
  accessModes:
  - ReadWriteOnce 
  resources:
    requests:
      storage: 2Gi
EOF
cat <<'EOF' | kubectl --kubeconfig=/home/ubuntu/.kube/config apply -f -
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: legacy
  name: legacy
  namespace: zuc0co
spec:
  replicas: 1
  selector:
    matchLabels:
      app: legacy
  template:
    metadata:
      labels:
        app: legacy
    spec:
      containers:
      - name: app
        image: alpine:3.9.2
        command: ["/bin/sh", "-c"]
        args:
        - while true; do 
          date > /metrics/raw.txt;
          top -n 1 -b >> /metrics/raw.txt;
          sleep 5;
          done
        # Share metric data between containers
        volumeMounts:
        - name: metrics
          mountPath: /metrics
      - name: adapter
        image: httpd:2.4.38-alpine
        command: ["/bin/sh", "-c"]
        # Adapt the legacy output to standard monitoring format
        args:
        - while true; do 
          date=$(head -1 /metrics/raw.txt);
          memory=$(head -2 /metrics/raw.txt | tail -1 | grep -o -E '\d+\w' | head -1);
          cpu=$(head -3 /metrics/raw.txt | tail -1 | grep -o -E '\d+%' | head -1);
          echo "{\"date\":\"$date\",\"memory\":\"$memory\",\"cpu\":\"$cpu\"}" >> /metrics/adapted.json;
          sleep 5;
          done
        # Share metric data between containers
        volumeMounts:
        - name: metrics
          mountPath: /metrics
      volumes:
      - name: metrics
        persistentVolumeClaim:
          claimName: metric-data
EOF
# task 4
echo adapter > /home/ubuntu/mcpod