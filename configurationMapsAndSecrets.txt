ubuntu@ip-10-0-128-5:~$ history
    1  # Create namespace
    2  kubectl create namespace configmaps
    3  # Set namespace as the default for the current context
    4  kubectl config set-context $(kubectl config current-context) --namespace=configmaps
    5  kubectl create configmap app-config --from-literal=DB_NAME=testdb   --from-literal=COLLECTION_NAME=messages
    6  kubectl get configmaps app-config -o yaml
    7  cat << 'EOF' > pod-configmap.yaml
apiVersion: v1
kind: Pod
metadata:
  name: db 
spec:
  containers:
  - image: mongo:4.0.6
    name: mongodb
    # Mount as volume 
    volumeMounts:
    - name: config
      mountPath: /config
    ports:
    - containerPort: 27017
      protocol: TCP
  volumes:
  - name: config
    # Declare the configMap to use for the volume
    configMap:
      name: app-config
EOF

    8  kubectl create -f pod-configmap.yaml
    9  kubectl exec db -it -- ls /config
   10  kubectl exec db -it -- cat /config/DB_NAME && echo
   11  kubectl create configmap --help | more
   12  # Create namespace
   13  kubectl create namespace secrets
   14  # Set namespace as the default for the current context
   15  kubectl config set-context $(kubectl config current-context) --namespace=secrets
   16  kubectl create secret generic app-secret --from-literal=password=123457
   17  kubectl get secret app-secret -o yaml
   18  kubectl get secret app-secret -o jsonpath="{.data.password}"   | base64 --decode   && echo
   19  cat << EOF > pod-secret.yaml 
apiVersion: v1
kind: Pod
metadata:
  name: pod-secret
spec:
  containers:
  - image: busybox:1.30.1
    name: busybox
    args:
    - sleep
    - "3600"
    env:
    - name: PASSWORD      # Name of environment variable
      valueFrom:
        secretKeyRef:
          name: app-secret  # Name of secret
          key: password     # Name of secret key
EOF

   20  kubectl create -f pod-secret.yaml
   21  kubectl exec pod-secret -- /bin/sh -c 'echo $PASSWORD'
   22  history
ubuntu@ip-10-0-128-5:~$